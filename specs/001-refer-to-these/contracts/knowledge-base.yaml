openapi: 3.0.3
info:
  title: Knowledge Base Management API
  version: 1.0.0
  description: API for managing products, documents, and vector search in the chatbot system

servers:
  - url: /api/v1

paths:
  # Product Management
  /products:
    get:
      summary: List products
      tags: [Products]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, draft, archived]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      pagination:
                        $ref: '#/components/schemas/Pagination'

    post:
      summary: Create product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      summary: Get product details
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ProductWithDocuments'

    put:
      summary: Update product
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'

    delete:
      summary: Delete product
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # Document Management
  /products/{productId}/documents:
    post:
      summary: Upload documents to product
      tags: [Documents]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                document_type:
                  type: string
                  enum: [technical, regulatory, safety, marketing, certification]
                auto_process:
                  type: boolean
                  default: true
      responses:
        '202':
          description: Documents uploaded and queued for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      upload_id:
                        type: string
                        format: uuid
                      files:
                        type: array
                        items:
                          $ref: '#/components/schemas/UploadedDocument'

  /documents:
    get:
      summary: List documents
      tags: [Documents]
      parameters:
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
        - name: document_type
          in: query
          schema:
            type: string
        - name: processing_status
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      documents:
                        type: array
                        items:
                          $ref: '#/components/schemas/DocumentSummary'
                      pagination:
                        $ref: '#/components/schemas/Pagination'

  /documents/{documentId}:
    get:
      summary: Get document details
      tags: [Documents]
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Document'

    delete:
      summary: Delete document
      tags: [Documents]
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /documents/{documentId}/status:
    get:
      summary: Get document processing status
      tags: [Documents]
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Processing status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ProcessingStatus'

  # Vector Search
  /search/vector:
    post:
      summary: Perform vector similarity search
      tags: [Search]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/VectorSearchResponse'

  /search/fulltext:
    post:
      summary: Perform full-text search
      tags: [Search]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullTextSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/FullTextSearchResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          type: string
        sku:
          type: string
        status:
          type: string
          enum: [active, inactive, draft, archived]
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductWithDocuments:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            documents:
              type: array
              items:
                $ref: '#/components/schemas/DocumentSummary'

    CreateProductRequest:
      type: object
      required: [name, category]
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        category:
          type: string
          maxLength: 100
        sku:
          type: string
          maxLength: 50
        status:
          type: string
          enum: [active, inactive, draft, archived]
          default: active
        metadata:
          type: object

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        category:
          type: string
          maxLength: 100
        sku:
          type: string
          maxLength: 50
        status:
          type: string
          enum: [active, inactive, draft, archived]
        metadata:
          type: object

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        title:
          type: string
        filename:
          type: string
        file_size:
          type: integer
        mime_type:
          type: string
        document_type:
          type: string
        language:
          type: string
        processing_status:
          type: string
        extracted_metadata:
          type: object
        ocr_confidence:
          type: number
        chunk_count:
          type: integer
        created_at:
          type: string
          format: date-time
        processed_at:
          type: string
          format: date-time

    DocumentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        document_type:
          type: string
        file_size:
          type: integer
        processing_status:
          type: string
        chunk_count:
          type: integer
        created_at:
          type: string
          format: date-time

    UploadedDocument:
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
        document_id:
          type: string
          format: uuid
        status:
          type: string

    ProcessingStatus:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        title:
          type: string
        processing_status:
          type: string
        progress_percentage:
          type: integer
          minimum: 0
          maximum: 100
        error_message:
          type: string
        chunks_created:
          type: integer
        processing_started_at:
          type: string
          format: date-time
        processing_completed_at:
          type: string
          format: date-time

    VectorSearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
        k:
          type: integer
          default: 5
          minimum: 1
          maximum: 50
        score_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.7
        filters:
          type: object
          properties:
            product_ids:
              type: array
              items:
                type: string
                format: uuid
            document_types:
              type: array
              items:
                type: string
            categories:
              type: array
              items:
                type: string

    VectorSearchResponse:
      type: object
      properties:
        query:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/VectorSearchResult'
        total_results:
          type: integer
        processing_time_ms:
          type: integer

    VectorSearchResult:
      type: object
      properties:
        chunk_id:
          type: string
          format: uuid
        document_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        content:
          type: string
        similarity_score:
          type: number
        chunk_type:
          type: string
        document_title:
          type: string
        product_name:
          type: string

    FullTextSearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
        limit:
          type: integer
          default: 20
        offset:
          type: integer
          default: 0

    FullTextSearchResponse:
      type: object
      properties:
        query:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/FullTextSearchResult'
        total_results:
          type: integer

    FullTextSearchResult:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        title:
          type: string
        content_snippet:
          type: string
        rank:
          type: number

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer
        items_per_page:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []