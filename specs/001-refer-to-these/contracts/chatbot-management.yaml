openapi: 3.0.3
info:
  title: Chatbot Management API
  version: 1.0.0
  description: API for creating, configuring, and managing chatbot instances

servers:
  - url: /api/v1

paths:
  # Chatbot Instance Management
  /chatbots:
    get:
      summary: List chatbot instances
      tags: [Chatbots]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, inactive, testing, maintenance]
        - name: llm_provider
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of chatbot instances
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      instances:
                        type: array
                        items:
                          $ref: '#/components/schemas/ChatbotSummary'
                      pagination:
                        $ref: '#/components/schemas/Pagination'

    post:
      summary: Create chatbot instance
      tags: [Chatbots]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatbotRequest'
      responses:
        '201':
          description: Chatbot instance created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Chatbot'

  /chatbots/{chatbotId}:
    get:
      summary: Get chatbot instance details
      tags: [Chatbots]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chatbot instance details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ChatbotDetails'

    put:
      summary: Update chatbot instance
      tags: [Chatbots]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChatbotRequest'
      responses:
        '200':
          description: Chatbot instance updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Chatbot'

    delete:
      summary: Delete chatbot instance
      tags: [Chatbots]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chatbot instance deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /chatbots/{chatbotId}/clone:
    post:
      summary: Clone chatbot instance
      tags: [Chatbots]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Chatbot instance cloned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Chatbot'

  # Knowledge Base Assignment
  /chatbots/{chatbotId}/documents:
    get:
      summary: Get assigned documents for chatbot
      tags: [Knowledge Base Assignment]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Assigned documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignedDocument'

    post:
      summary: Assign documents to chatbot
      tags: [Knowledge Base Assignment]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                document_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Documents assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

    delete:
      summary: Remove document assignments from chatbot
      tags: [Knowledge Base Assignment]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                document_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Document assignments removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # Admin Feedback System
  /chatbots/{chatbotId}/feedback:
    get:
      summary: List feedback for chatbot
      tags: [Admin Feedback]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, analyzing, completed, applied, rejected]
        - name: feedback_type
          in: query
          schema:
            type: string
            enum: [accuracy, tone, completeness, relevance, other]
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
      responses:
        '200':
          description: Feedback list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'

    post:
      summary: Submit feedback for chatbot
      tags: [Admin Feedback]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitFeedbackRequest'
      responses:
        '201':
          description: Feedback submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Feedback'

  /chatbots/{chatbotId}/feedback/{feedbackId}/analysis:
    get:
      summary: Get feedback analysis results
      tags: [Admin Feedback]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Feedback analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/FeedbackAnalysis'

  /chatbots/{chatbotId}/feedback/{feedbackId}/apply:
    post:
      summary: Apply feedback improvements
      tags: [Admin Feedback]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyFeedbackRequest'
      responses:
        '200':
          description: Improvements applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AppliedImprovement'

  # Model and Configuration Management
  /models:
    get:
      summary: List available LLM models
      tags: [Models]
      responses:
        '200':
          description: Available models
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AvailableModel'

  /chatbots/{chatbotId}/test:
    post:
      summary: Test chatbot configuration
      tags: [Testing]
      parameters:
        - name: chatbotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                test_query:
                  type: string
                include_debug:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Test response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/TestResponse'

components:
  schemas:
    Chatbot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, active, inactive, testing, maintenance]
        avatar_url:
          type: string
        welcome_message:
          type: string
        fallback_message:
          type: string
        llm_provider:
          type: string
        llm_model:
          type: string
        system_prompt:
          type: string
        model_config:
          type: object
        rag_enabled:
          type: boolean
        retrieval_k:
          type: integer
        score_threshold:
          type: number
        context_window:
          type: integer
        knowledge_base_filter:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_active_at:
          type: string
          format: date-time

    ChatbotSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        llm_provider:
          type: string
        llm_model:
          type: string
        session_count:
          type: integer
        message_count:
          type: integer
        last_active_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    ChatbotDetails:
      allOf:
        - $ref: '#/components/schemas/Chatbot'
        - type: object
          properties:
            assigned_documents:
              type: array
              items:
                $ref: '#/components/schemas/AssignedDocument'
            integrations:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationSummary'
            performance_metrics:
              $ref: '#/components/schemas/PerformanceMetrics'

    CreateChatbotRequest:
      type: object
      required: [name, llm_model, system_prompt]
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        avatar_url:
          type: string
        welcome_message:
          type: string
        fallback_message:
          type: string
        llm_provider:
          type: string
          default: bedrock
        llm_model:
          type: string
        system_prompt:
          type: string
        model_config:
          type: object
          properties:
            temperature:
              type: number
              minimum: 0
              maximum: 2
            max_tokens:
              type: integer
              minimum: 1
            top_p:
              type: number
              minimum: 0
              maximum: 1
        rag_enabled:
          type: boolean
          default: true
        retrieval_k:
          type: integer
          default: 5
        score_threshold:
          type: number
          default: 0.7
        context_window:
          type: integer
          default: 4000
        knowledge_base_filter:
          type: object
        status:
          type: string
          enum: [draft, testing, active]
          default: draft

    UpdateChatbotRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        avatar_url:
          type: string
        welcome_message:
          type: string
        fallback_message:
          type: string
        system_prompt:
          type: string
        model_config:
          type: object
        rag_enabled:
          type: boolean
        retrieval_k:
          type: integer
        score_threshold:
          type: number
        context_window:
          type: integer
        knowledge_base_filter:
          type: object
        status:
          type: string
          enum: [draft, active, inactive, testing, maintenance]

    AssignedDocument:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        title:
          type: string
        document_type:
          type: string
        assigned_at:
          type: string
          format: date-time
        chunk_count:
          type: integer

    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatbot_id:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
        feedback_text:
          type: string
        feedback_type:
          type: string
          enum: [accuracy, tone, completeness, relevance, other]
        severity:
          type: string
          enum: [low, medium, high, critical]
        context:
          type: string
        status:
          type: string
          enum: [pending, analyzing, completed, applied, rejected]
        created_at:
          type: string
          format: date-time
        processed_at:
          type: string
          format: date-time

    SubmitFeedbackRequest:
      type: object
      required: [feedback_text, feedback_type, severity]
      properties:
        feedback_text:
          type: string
        feedback_type:
          type: string
          enum: [accuracy, tone, completeness, relevance, other]
        severity:
          type: string
          enum: [low, medium, high, critical]
        related_message_id:
          type: string
          format: uuid
        context:
          type: string

    FeedbackAnalysis:
      type: object
      properties:
        feedback_id:
          type: string
          format: uuid
        analysis_status:
          type: string
          enum: [pending, analyzing, completed, failed]
        suggested_improvements:
          type: array
          items:
            $ref: '#/components/schemas/SuggestedImprovement'
        generated_prompt:
          type: string
        comparison_results:
          type: object
          properties:
            original_prompt:
              type: string
            suggested_prompt:
              type: string
            key_differences:
              type: array
              items:
                type: string
        analyzed_at:
          type: string
          format: date-time

    SuggestedImprovement:
      type: object
      properties:
        improvement_type:
          type: string
          enum: [system_prompt, configuration, knowledge_base]
        description:
          type: string
        specific_changes:
          type: object
        confidence_score:
          type: number
        impact_assessment:
          type: string

    ApplyFeedbackRequest:
      type: object
      properties:
        improvements_to_apply:
          type: array
          items:
            type: string
        create_backup:
          type: boolean
          default: true
        test_before_apply:
          type: boolean
          default: true

    AppliedImprovement:
      type: object
      properties:
        application_id:
          type: string
          format: uuid
        applied_improvements:
          type: array
          items:
            type: string
        backup_created:
          type: boolean
        test_results:
          type: object
        applied_at:
          type: string
          format: date-time

    AvailableModel:
      type: object
      properties:
        model_id:
          type: string
        name:
          type: string
        provider:
          type: string
        max_tokens:
          type: integer
        cost_per_1k_tokens:
          type: object
          properties:
            input:
              type: number
            output:
              type: number
        capabilities:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string

    TestResponse:
      type: object
      properties:
        response:
          type: string
        processing_time_ms:
          type: integer
        model_used:
          type: string
        token_usage:
          type: object
        sources:
          type: array
          items:
            $ref: '#/components/schemas/ResponseSource'
        debug_info:
          type: object

    ResponseSource:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        document_title:
          type: string
        chunk_id:
          type: string
          format: uuid
        relevance_score:
          type: number
        content_snippet:
          type: string

    IntegrationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        integration_type:
          type: string
        integration_name:
          type: string
        status:
          type: string

    PerformanceMetrics:
      type: object
      properties:
        total_sessions:
          type: integer
        total_messages:
          type: integer
        avg_response_time_ms:
          type: number
        user_satisfaction_score:
          type: number
        cost_per_conversation:
          type: number

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer
        items_per_page:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []